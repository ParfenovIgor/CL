/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef SKELETON_HEADER
#define SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"


class Skeleton : public Visitor
{
public:
  void visitProgram(Program *p);
  void visitExpr(Expr *p);
  void visitAbstractionField_(AbstractionField_ *p);
  void visitWhereField_(WhereField_ *p);
  void visitRecordField_(RecordField_ *p);
  void visitVariantField_(VariantField_ *p);
  void visitStatement(Statement *p);
  void visitType(Type *p);
  void visitRecordTypeField_(RecordTypeField_ *p);
  void visitVariantTypeField_(VariantTypeField_ *p);
  void visitProgramRoot(ProgramRoot *p);
  void visitConstTrue(ConstTrue *p);
  void visitConstFalse(ConstFalse *p);
  void visitConstZero(ConstZero *p);
  void visitIf(If *p);
  void visitSucc(Succ *p);
  void visitPred(Pred *p);
  void visitIsZero(IsZero *p);
  void visitVar(Var *p);
  void visitAbstraction(Abstraction *p);
  void visitMultiAbstraction(MultiAbstraction *p);
  void visitApplication(Application *p);
  void visitTypeAbstraction(TypeAbstraction *p);
  void visitTypeApplication(TypeApplication *p);
  void visitFix(Fix *p);
  void visitWhere(Where *p);
  void visitMultiWhere(MultiWhere *p);
  void visitReference(Reference *p);
  void visitDereference(Dereference *p);
  void visitTuple(Tuple *p);
  void visitTupleGet(TupleGet *p);
  void visitRecord(Record *p);
  void visitRecordGet(RecordGet *p);
  void visitVariant(Variant *p);
  void visitVariantCase(VariantCase *p);
  void visitArray(Array *p);
  void visitArrayEmpty(ArrayEmpty *p);
  void visitArrayGet(ArrayGet *p);
  void visitArrayPush(ArrayPush *p);
  void visitArrayPop(ArrayPop *p);
  void visitArrayLen(ArrayLen *p);
  void visitConstInt(ConstInt *p);
  void visitToInt(ToInt *p);
  void visitAddInt(AddInt *p);
  void visitSubInt(SubInt *p);
  void visitMulInt(MulInt *p);
  void visitDivInt(DivInt *p);
  void visitEquInt(EquInt *p);
  void visitLesInt(LesInt *p);
  void visitConstReal(ConstReal *p);
  void visitToReal(ToReal *p);
  void visitAddReal(AddReal *p);
  void visitSubReal(SubReal *p);
  void visitMulReal(MulReal *p);
  void visitDivReal(DivReal *p);
  void visitEquReal(EquReal *p);
  void visitLesReal(LesReal *p);
  void visitReadInt(ReadInt *p);
  void visitReadReal(ReadReal *p);
  void visitWriteInt(WriteInt *p);
  void visitWriteReal(WriteReal *p);
  void visitAbstractionField(AbstractionField *p);
  void visitWhereField(WhereField *p);
  void visitRecordField(RecordField *p);
  void visitVariantField(VariantField *p);
  void visitImport(Import *p);
  void visitDefinition(Definition *p);
  void visitTypeDefinition(TypeDefinition *p);
  void visitAssignment(Assignment *p);
  void visitIfStatement(IfStatement *p);
  void visitIfElseStatement(IfElseStatement *p);
  void visitLoop(Loop *p);
  void visitBreak(Break *p);
  void visitContinue(Continue *p);
  void visitReturn(Return *p);
  void visitEval(Eval *p);
  void visitAutoType(AutoType *p);
  void visitBoolType(BoolType *p);
  void visitNatType(NatType *p);
  void visitRefType(RefType *p);
  void visitVarType(VarType *p);
  void visitUniType(UniType *p);
  void visitFunType(FunType *p);
  void visitTupleType(TupleType *p);
  void visitRecordType(RecordType *p);
  void visitVariantType(VariantType *p);
  void visitArrayType(ArrayType *p);
  void visitIntType(IntType *p);
  void visitRealType(RealType *p);
  void visitRecordTypeField(RecordTypeField *p);
  void visitVariantTypeField(VariantTypeField *p);
  void visitListExpr(ListExpr *p);
  void visitListAbstractionField_(ListAbstractionField_ *p);
  void visitListWhereField_(ListWhereField_ *p);
  void visitListRecordField_(ListRecordField_ *p);
  void visitListVariantField_(ListVariantField_ *p);
  void visitListStatement(ListStatement *p);
  void visitListType(ListType *p);
  void visitListRecordTypeField_(ListRecordTypeField_ *p);
  void visitListVariantTypeField_(ListVariantTypeField_ *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};


#endif
