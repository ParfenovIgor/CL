/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4). */

/* Lexer definition for use with FLex */

%option noyywrap noinput nounput
%option reentrant bison-bridge bison-locations

/* Additional data for the lexer: a buffer for lexing string literals. */
%option extra-type="Buffer"

%{
#include "Absyn.H"
#include "Bison.H"

#define initialize_lexer syntax__initialize_lexer

/* BEGIN extensible string buffer */

#include "Buffer.H"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
#define literal_buffer yyextra

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START CHAR CHARESC CHAREND STRING ESCAPED COMMENT

%%  /* Rules. */

<INITIAL>","      	 return _COMMA;
<INITIAL>"$0"      	 return _SYMB_1;
<INITIAL>"("      	 return _LPAREN;
<INITIAL>")"      	 return _RPAREN;
<INITIAL>"{"      	 return _LBRACE;
<INITIAL>"}"      	 return _RBRACE;
<INITIAL>"~>"      	 return _SYMB_6;
<INITIAL>"["      	 return _LBRACK;
<INITIAL>"]"      	 return _RBRACK;
<INITIAL>"="      	 return _EQ;
<INITIAL>"*"      	 return _STAR;
<INITIAL>"<"      	 return _LT;
<INITIAL>">"      	 return _GT;
<INITIAL>"."      	 return _DOT;
<INITIAL>"\\0"      	 return _SYMB_14;
<INITIAL>"i+"      	 return _SYMB_15;
<INITIAL>"i-"      	 return _SYMB_16;
<INITIAL>"i*"      	 return _SYMB_17;
<INITIAL>"i/"      	 return _SYMB_18;
<INITIAL>"i="      	 return _SYMB_19;
<INITIAL>"i<"      	 return _SYMB_20;
<INITIAL>"r+"      	 return _SYMB_21;
<INITIAL>"r-"      	 return _SYMB_22;
<INITIAL>"r*"      	 return _SYMB_23;
<INITIAL>"r/"      	 return _SYMB_24;
<INITIAL>"r="      	 return _SYMB_25;
<INITIAL>"r<"      	 return _SYMB_26;
<INITIAL>"|"      	 return _BAR;
<INITIAL>"=>"      	 return _RDARROW;
<INITIAL>"<-"      	 return _LARROW;
<INITIAL>";"      	 return _SEMI;
<INITIAL>"_"      	 return _UNDERSCORE;
<INITIAL>"%"      	 return _PERCENT;
<INITIAL>"->"      	 return _RARROW;
<INITIAL>":"      	 return _COLON;
<INITIAL>"Bool"      	 return _KW_Bool;
<INITIAL>"Int"      	 return _KW_Int;
<INITIAL>"Nat"      	 return _KW_Nat;
<INITIAL>"Real"      	 return _KW_Real;
<INITIAL>"Ref"      	 return _KW_Ref;
<INITIAL>"as"      	 return _KW_as;
<INITIAL>"break"      	 return _KW_break;
<INITIAL>"case"      	 return _KW_case;
<INITIAL>"continue"      	 return _KW_continue;
<INITIAL>"def"      	 return _KW_def;
<INITIAL>"else"      	 return _KW_else;
<INITIAL>"eval"      	 return _KW_eval;
<INITIAL>"false"      	 return _KW_false;
<INITIAL>"fix"      	 return _KW_fix;
<INITIAL>"fun"      	 return _KW_fun;
<INITIAL>"get"      	 return _KW_get;
<INITIAL>"if"      	 return _KW_if;
<INITIAL>"import"      	 return _KW_import;
<INITIAL>"iszero"      	 return _KW_iszero;
<INITIAL>"len"      	 return _KW_len;
<INITIAL>"loop"      	 return _KW_loop;
<INITIAL>"of"      	 return _KW_of;
<INITIAL>"pop"      	 return _KW_pop;
<INITIAL>"pred"      	 return _KW_pred;
<INITIAL>"push"      	 return _KW_push;
<INITIAL>"readInt"      	 return _KW_readInt;
<INITIAL>"readReal"      	 return _KW_readReal;
<INITIAL>"ref"      	 return _KW_ref;
<INITIAL>"ret"      	 return _KW_ret;
<INITIAL>"return"      	 return _KW_return;
<INITIAL>"succ"      	 return _KW_succ;
<INITIAL>"then"      	 return _KW_then;
<INITIAL>"toInt"      	 return _KW_toInt;
<INITIAL>"toReal"      	 return _KW_toReal;
<INITIAL>"true"      	 return _KW_true;
<INITIAL>"typedef"      	 return _KW_typedef;
<INITIAL>"uni"      	 return _KW_uni;
<INITIAL>"where"      	 return _KW_where;
<INITIAL>"writeInt"      	 return _KW_writeInt;
<INITIAL>"writeReal"      	 return _KW_writeReal;

<INITIAL>"//"[^\n]* /* skip */; /* BNFC: comment "//" */
<INITIAL>"/*" BEGIN COMMENT;
<COMMENT>"*/" BEGIN INITIAL;
<COMMENT>.    /* skip */;
<COMMENT>[\n] /* skip */;

<INITIAL>"\""        	 LITERAL_BUFFER_CREATE(); BEGIN STRING;
<STRING>\\             	 BEGIN ESCAPED;
<STRING>\"             	 yylval->_string = LITERAL_BUFFER_HARVEST(); BEGIN INITIAL; return _STRING_;
<STRING>.              	 LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
<ESCAPED>f             	 LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
<ESCAPED>n             	 LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
<ESCAPED>r             	 LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
<ESCAPED>t             	 LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
<ESCAPED>\"            	 LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
<ESCAPED>\\            	 LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
<ESCAPED>.             	 LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
<STRING,ESCAPED><<EOF>>	 LITERAL_BUFFER_FREE(); return _ERROR_;
<INITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval->_double = atof(yytext); return _DOUBLE_;
<INITIAL>{DIGIT}+      	 yylval->_int = atoi(yytext); return _INTEGER_;
<INITIAL>{LETTER}{IDENT}*      	 yylval->_string = strdup(yytext); return _IDENT_;
<INITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<INITIAL>.      	 return _ERROR_;

%%  /* Initialization code. */

yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}

