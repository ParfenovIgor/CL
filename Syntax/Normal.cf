comment             "//" ;
comment             "/*" "*/" ;

ProgramRoot.        Program ::= [Statement] ;

separator           Expr    "," ;

Where.              Expr    ::= Expr "where" Type Ident "=" Expr ;
MultiWhere.         Expr    ::= Expr "where" "{" [WhereField_] "}" ;
Abstraction.        Expr    ::= "fun" "(" Type Ident ")" "{" [Statement] "ret" Expr "}" ;
MultiAbstraction.   Expr    ::= "fun" "(" [AbstractionField_] ")" "{" [Statement] "ret" Expr "}" ;
Application.        Expr    ::= Expr Expr1 ;
TypeAbstraction.    Expr    ::= "uni" Ident "~>" Expr ;
TypeApplication.    Expr    ::= Expr "[" Type "]" ;
_.                  Expr    ::= Expr1 ;

separator           AbstractionField_   "," ;
AbstractionField.   AbstractionField_   ::= Type Ident ;

ConstTrue.          Expr6   ::= "true" ;
ConstFalse.         Expr6   ::= "false" ;
ConstZero.          Expr6   ::= "$0" ;
If.                 Expr1   ::= "if" Expr1 "then" Expr1 "else" Expr1 ;
Succ.               Expr1   ::= "succ" Expr1 ;
Pred.               Expr1   ::= "pred" Expr1 ;
IsZero.             Expr1   ::= "iszero" Expr1 ;
Var.                Expr6   ::= Ident ;
Fix.                Expr1   ::= "fix" Expr1 ;
Reference.          Expr5   ::= "ref" Expr5 ;
Dereference.        Expr5   ::= "*" Expr5 ;
Tuple.              Expr1   ::= "<" [Expr] ">" ;
TupleGet.           Expr1   ::= Expr1 "." Integer ;
Record.             Expr1   ::= "{" [RecordField_] "}" ;
RecordGet.          Expr1   ::= Expr1 "." Ident ;
Variant.            Expr1   ::= "<" Ident "=" Expr ">" "as" Type ;
VariantCase.        Expr1   ::= "case" Expr "of" [VariantField_] ;
Array.              Expr1   ::= "[" [Expr] "]" ;
ArrayGet.           Expr1   ::= "get" "(" Expr Expr ")" ;
ArrayPush.          Expr1   ::= "push" "(" Expr Expr ")" ;
ArrayPop.           Expr1   ::= "pop" "(" Expr ")" ;
ArrayLen.           Expr1   ::= "len" "(" Expr ")" ;

ConstInt.           Expr6   ::= Integer ;
ToInt.              Expr1   ::= "toInt" "(" Expr ")" ;
AddInt.             Expr4   ::= Expr2 "i+" Expr2 ;
SubInt.             Expr4   ::= Expr2 "i-" Expr2 ;
MulInt.             Expr3   ::= Expr2 "i*" Expr2 ;
DivInt.             Expr3   ::= Expr2 "i/" Expr2 ;
EquInt.             Expr2   ::= Expr2 "i=" Expr2 ;
LesInt.             Expr2   ::= Expr2 "i<" Expr2 ;

ConstReal.          Expr6   ::= Double ;
ToReal.             Expr1   ::= "toReal" "(" Expr ")" ;
AddReal.            Expr4   ::= Expr2 "r+" Expr2 ;
SubReal.            Expr4   ::= Expr2 "r-" Expr2 ;
MulReal.            Expr3   ::= Expr2 "r*" Expr2 ;
DivReal.            Expr3   ::= Expr2 "r/" Expr2 ;
EquReal.            Expr2   ::= Expr2 "r=" Expr2 ;
LesReal.            Expr2   ::= Expr2 "r<" Expr2 ;

ReadInt.            Expr1   ::= "readInt" ;
ReadReal.           Expr1   ::= "readReal" ;
WriteInt.           Expr1   ::= "writeInt" Expr1 ;
WriteReal.          Expr1   ::= "writeReal" Expr1 ;

_.                  Expr1   ::= Expr2 ;
_.                  Expr2   ::= Expr3 ;
_.                  Expr3   ::= Expr4 ;
_.                  Expr4   ::= Expr5 ;
_.                  Expr5   ::= Expr6 ;
_.                  Expr6   ::= "(" Expr ")" ;

separator           WhereField_ "," ;
WhereField.         WhereField_ ::= Ident ":" Type "=" Expr1 ;

separator           RecordField_    "," ;
RecordField.        RecordField_    ::= Ident "=" Expr ;

separator           VariantField_   "|" ;
VariantField.       VariantField_   ::= "<" Ident "=" Ident ">" "=>" Expr ;

Import.             Statement   ::= "import" "<" Ident ">" ;
Definition.         Statement   ::= "def" Type Ident "=" Expr;
MoveAssignment.     Statement   ::= Expr "<-" Expr ;
CopyAssignment.     Statement   ::= Expr ":=" Expr ;
IfStatement.        Statement   ::= "if" Expr "{" [Statement] "}" ;
IfElseStatement.    Statement   ::= "if" Expr "{" [Statement] "}" "else" "{" [Statement] "}" ;
Loop.               Statement   ::= "loop" "{" [Statement] "}" ;
Break.              Statement   ::= "break" ;
Continue.           Statement   ::= "continue" ;
Return.             Statement   ::= "return" ;
Eval.               Statement   ::= "eval" Expr ;
separator           Statement   ";" ;

separator           Type    "," ;

AutoType.           Type    ::= "_" ;
BoolType.           Type    ::= "Bool" ;
NatType.            Type    ::= "Nat" ;
RefType.            Type    ::= "Ref" Type ;
VarType.            Type    ::= Ident ;
UniType.            Type    ::= "%" Ident "." Type ;
FunType.            Type    ::= Type "->" Type ;
TupleType.          Type    ::= "<" [Type] ">" ;
RecordType.         Type    ::= "{" [RecordTypeField_] "}" ;
VariantType.        Type    ::= "<" [VariantTypeField_] ">" ;
ArrayType.          Type    ::= "[" Type "]" ;
IntType.            Type    ::= "Int" ;
RealType.           Type    ::= "Real" ;
_.                  Type    ::= "(" Type ")" ;

separator           RecordTypeField_    "," ;
RecordTypeField.    RecordTypeField_    ::= Ident ":" Type ;

separator           VariantTypeField_   "," ;
VariantTypeField.   VariantTypeField_   ::= Ident ":" Type ;

